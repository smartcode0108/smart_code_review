name: Ollama Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v42
    
      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          ollama serve &
          for i in {1..30}; do
            if curl -s http://localhost:11434 > /dev/null; then
              echo "Ollama server is ready."
              break
            fi
            echo "Waiting for Ollama server to start..."
            sleep 2
          done
          ollama pull codegemma:7b-instruct || { echo "Failed to pull codegemma model"; exit 1; }
          ollama pull codellama || { echo "Failed to pull codellama model"; exit 1; }
          ollama pull codegemma:7b-instruct || { echo "Failed to pull codegemma model"; exit 1; }

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Get list of changed Python files
        id: changed
        run: |
          files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD -- '*.py')
          echo "$files"
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          echo "$files" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Fix PEP 8 and pylint format files with Black
        run: |
          echo "Identifying files with changes..."
          echo "Files with changes:"
          echo "$CHANGED_FILES"

          echo "Applying autopep8, black, and autoflake to changed files..."
          for file in $CHANGED_FILES; do
            if [ ! -f "$file" ]; then
              echo "Skipping file $file as it does not exist."
              continue
            fi
            echo "Fixing file: $file"
            autopep8 --in-place --global-config /dev/null --max-line-length 75 "$file"
            black "$file"
            autoflake --remove-all-unused-imports --remove-unused-variables --in-place "$file"
          done
          echo "PEP 8 fixes and formatting applied to changed files."

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected. Preparing to commit..."
            git add .
            LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B || echo "")
            if [[ "$LAST_COMMIT_MESSAGE" == "Auto-fix PEP 8 and pylint issues" ]]; then
              echo "Amending the last commit..."
              git commit --amend --no-edit
            else
              echo "Creating a new commit..."
              git commit -m "Auto-fix PEP 8 and pylint issues"
            fi
            git push --force-with-lease origin ${{ github.head_ref }}
          else
            echo "No changes to commit. Skipping push."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get list of changed Python files
        id: changed-python-files
        run: |
          echo "Fetching list of changed Python files..."
          files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD -- '*.py')
          echo "$files"
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          echo "$files" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Run Code Review
        if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.event.pull_request.head.sha }}
          FILE_PATTERN: '**/*.{ts,tsx}'
          LAST_REVIEWED_SHA_FILE: .last_reviewed_sha
        run: |
          echo "Starting code review process ..."
          if [ -f $LAST_REVIEWED_SHA_FILE ]; then
            LAST_REVIEWED_SHA=$(cat $LAST_REVIEWED_SHA_FILE)
            if [ $LAST_REVIEWED_SHA != $GITHUB_SHA ]; then
              # Run code review only for new changes
              CHANGED_FILES=$(git diff --name-only $LAST_REVIEWED_SHA $GITHUB_SHA)
              echo "Running code review for new changes: $CHANGED_FILES"
              python src/main.py $CHANGED_FILES
            else
              echo "No new changes, skipping code review..."
            fi
          else
            # Run code review for all files
            echo "Running code review for all files..."
            python src/main.py
          fi
          echo $GITHUB_SHA > $LAST_REVIEWED_SHA_FILE

      - name: Run unittest suggestion script
        env:
          CHANGED_FILES: ${{ env.CHANGED_FILES }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "Running unittest suggestion script for changed files..."
          for file in $CHANGED_FILES; do
            echo "Processing file: $file"
            python src/unittest_suggest.py "$file"
          done

      - name: Generate docstrings using Ollama
        run: |
          for file in $CHANGED_FILES; do
            if [[ "$file" == *.py ]]; then
              echo "Running docstring generator on $file"
              python src/doc_string.py "$file"
            fi
          done
      
      - name: Commit and push docstring changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          if [ -n "$(git status --porcelain)" ]; then
            echo "ðŸ“¦ Docstring changes detected. Preparing to commit..."
            git add .
            git reset .last_reviewed_sha
            LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B || echo "")
            if [[ "$LAST_COMMIT_MESSAGE" == "ðŸ¤– Auto-generate docstrings using Ollama" ]]; then
              echo "Amending the last commit..."
              git commit --amend --no-edit
            else
              echo "Creating a new commit..."
              git commit -m "ðŸ¤– Auto-generate docstrings using Ollama"
            fi
            git push --force-with-lease origin ${{ github.head_ref }}
          else
            echo "âœ… No docstring changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Slack Notification
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "username": "GitHub PR Bot",
              "attachments": [
                {
                  "color": "good",
                  "title": "New Pull Request Created",
                  "text": "A new pull request has been created in *${{ github.repository }}*.",
                  "fields": [
                    {
                      "title": "PR Title",
                      "value": "${{ github.event.pull_request.title }}",
                      "short": true
                    },
                    {
                      "title": "PR URL",
                      "value": "<${{ github.event.pull_request.html_url }}|View Pull Request>",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN }}

      - name: Cleanup
        if: always()
        run: |
          sudo systemctl stop ollama || pkill ollama